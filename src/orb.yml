version: 2.1
description: >
  Run the maven-release-plugin in CircleCI. This Orb allows publishing of build
  artifacts by invoking the maven-release-plugin. See: https://maven.apache.org/maven-release/maven-release-plugin/
  The source for this Orb is available at: https://github.com/sonatype-nexus-community/circleci-maven-release-orb
  Large chunks taken from this excellent Orb: https://github.com/bbottema-circleci/circleci-orbs
  Thanks Benny!


  Since may of the ideas in this Orb are taken from Benny's Orb, you may want to see
  http://www.bennybottema.com/2019/02/20/automating-your-github-library-releases-to-maven-central/ to find out
  more about the steps performed and which environment variables are expected in the Context.

  The following environmental variables are expected by this Orb, which are unique for each project:
    - GITHUB_COMMIT_KEY: base64 private SSH key, matching the public key (with write access) in your Github project
    - GITHUB_USERNAME: Your Github username
    - GITHUB_EMAIL: Your Github email
    - GITHUB_FINGERPRINT: Github's server fingerprint so SSH can trust this host
    - GPG_PASSPHRASE: Password used for signing artifacts with GPG
    - SECRING_GPG_ASC_BASE64: Base64 GPG ASCII keyring
    - SERVER_OSSRH_PASSWORD: OSS Sonatype username
    - SERVER_OSSRH_USERNAME: OSS Sonatype password

  The pom.xml at the root of you project also requires a few tags:

  The pom must define a 'developerConnection' tag in the 'scm' section.
  The following 'distributionManagement', 'build' and 'profile' definitions are also required.
  An example of such a maven pom file is here:
    https://github.com/sonatype-nexus-community/circleci-maven-release-orb/blob/master/test/pom.xml

  <scm>
    <developerConnection>scm:git:git@github.com:bhamail/test-circleci-maven-release.git</developerConnection>
    <tag>HEAD</tag>
  </scm>

  <distributionManagement>
    <repository>
      <id>rso</id>
      <url>https://repository.sonatype.org/content/repositories/releases/</url>
    </repository>
  </distributionManagement>

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-release-plugin</artifactId>
        <configuration>
          <releaseProfiles>gpg-sign</releaseProfiles>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>gpg-sign</id>
      <!--
      only sign during deploy phase
      -->
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>1.6</version>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
                <configuration>
                  <gpgArguments>
                    <arg>--pinentry-mode</arg>
                    <arg>loopback</arg>
                  </gpgArguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <properties>
        <gpg.passphrase>${env.GPG_PASSPHRASE}</gpg.passphrase>
      </properties>
    </profile>
  </profiles>

  The Orb also expects to find the maven settings file `.circleci/.maven.xml` in the project root.
  You can override the location of this maven settings file by redefining the `mvn-release-perform-command` anchor.
  An example of such a maven settings file is here:
    https://github.com/sonatype-nexus-community/circleci-maven-release-orb/blob/master/test/.maven.xml

  <settings xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/SETTINGS/1.0.0" xsi:schemalocation="http://maven.apache.org/SETTINGS/1.0.0
                        http://maven.apache.org/xsd/settings-1.0.0.xsd">
    <servers>
      <server>
        <!-- Maven Central Deployment -->
        <id>rso</id>
        <username>${env.SONATYPE_USERNAME}</username>
        <password>${env.SONATYPE_PASSWORD}</password>
      </server>
    </servers>

examples:
  maven-release-example:
    description: The configuration below will use the maven-release-plugin to perform a maven release.
    usage:
      version: 2.1

      orbs:
        circleci-maven-release-orb: sonatype-nexus-community/circleci-maven-release-orb@x.y.z

      workflows:
        main:
          jobs:
            - circleci-maven-release-orb/run-maven-release

  maven-release-dry-run-example:
    description: |
      The configuration below will use the maven-release-plugin to perform a "dry run" of a maven release.
      No changes will be committed to source control.
    usage:
      version: 2.1

      orbs:
        circleci-maven-release-orb: sonatype-nexus-community/circleci-maven-release-orb@x.y.z

      workflows:
        main:
          jobs:
            - circleci-maven-release-orb/run-maven-release

  maven-release-dry-run-custom-maven-settings-example:
    description: |
      The configuration below will perform a "dry run" using a maven settings file in a different location
      by redefining the `mvn-release-perform-command` anchor.
    usage:
      version: 2.1

      orbs:
        circleci-maven-release-orb: sonatype-nexus-community/circleci-maven-release-orb@x.y.z

      # custom settings.xml file
      mvn-release-perform-command: &mvn-release-perform-command-dryRun-mysettings
        mvn-release-perform-command: mvn --batch-mode release:perform -DdryRun=true -s my-settings.xml

      workflows:
        main:
          jobs:
            - circleci-maven-release-orb/run-maven-release:
                <<: *mvn-release-perform-command-dryRun-mysettings

  maven-release-dry-run-custom-pom-and-settings-example:
    description: |
      The configuration below will perform a "dry run" using a maven settings file in a different location
      by redefining the `mvn-release-perform-command` anchor.
    usage:
      version: 2.1

      orbs:
        circleci-maven-release-orb: sonatype-nexus-community/circleci-maven-release-orb@x.y.z

      # custom pom.xml - requires redefining all the maven commands
      mvn-read-version-command: &mvn-read-version-command-dryRun-mypom
        mvn-read-version-command: mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec -f my-pom.xml
      mvn-release-prepare-command: &mvn-release-prepare-command-dryRun-mypom
        mvn-release-prepare-command: mvn --batch-mode release:prepare -DdryRun=true -f my-pom.xml
      mvn-release-perform-command: &mvn-release-perform-command-dryRun-mypom
        mvn-release-perform-command: mvn --batch-mode release:perform -DdryRun=true -s .circleci/.maven.xml -f my-pom.xml

      workflows:
        main:
          jobs:
            - circleci-maven-release-orb/run-maven-release:
                <<: *mvn-read-version-command-dryRun-mypom
                <<: *mvn-release-prepare-command-dryRun-mypom
                <<: *mvn-release-perform-command-dryRun-mypom

executors:
  maven-executor:
    description: "CircleCI provided docker image with OpenJDK installed. see: https://circleci.com/docs/2.0/circleci-images/#openjdk"
    docker:
      - image: circleci/openjdk:8-jdk

deploy-defaults: &JOB_DEPLOY_DEFAULTS
  parameters:
    executor:
      type: executor
      default: maven-executor
    mvn-read-version-command:
      type: string
      default: mvn -q -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec
    mvn-release-prepare-command:
      type: string
      default: mvn --batch-mode release:prepare
    mvn-release-perform-command:
      type: string
      default: mvn --batch-mode release:perform -s .circleci/.maven.xml
  executor: <<parameters.executor>>

commands:
  configure-gpg:
    steps:
      - run:
          name: Configure GPG private key for signing project artifacts in OSS Sonatype
          command: |
            echo $SECRING_GPG_ASC_BASE64 | base64 --decode | gpg --batch --no-tty --import --yes

  configure-git:
    steps:
      - run:
          name: Configure GIT with host fingerprint, user info and SSH key for pushing
          command: |
            mkdir -p ~/.ssh
            echo "Adding github.com as known host..."
            echo $GITHUB_FINGERPRINT >> ~/.ssh/known_hosts
            echo "Setting private SSH key for pushing new version to repo..."
            echo $GITHUB_COMMIT_KEY | base64 --decode >> ~/.ssh/id_rsa
            chmod 400 ~/.ssh/id_rsa # prevents "UNPROTECTED PRIVATE KEY FILE" error
            git config user.name "$GITHUB_USERNAME"
            git config user.email "$GITHUB_EMAIL"

  maven-release:
    parameters:
      mvn-read-version-command:
        type: string
      mvn-release-prepare-command:
        type: string
      mvn-release-perform-command:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: maven-release-orb-{{ checksum ".circleci/config.yml" }}
      - configure-gpg
      - configure-git
      - run:
          name: Release new version to Maven Central and push new project version to repo
          command: |
            echo "Starting new release..."
            MVN_VERSION=$(<< parameters.mvn-read-version-command >>)
            echo "Preparing release from version ${MVN_VERSION}..."
            << parameters.mvn-release-prepare-command >>
            if [ -f "release.properties" ]; then
              #echo "true" >> releasePropsCreated
              echo "Generated release.properties: ..."
              cat release.properties
            fi
            << parameters.mvn-release-perform-command >>
            echo "Release completed"
            MVN_VERSION_NEXT_DEV=$(<< parameters.mvn-read-version-command >>)
            echo "New development version ${MVN_VERSION_NEXT_DEV}"
      - persist_to_workspace:
          root: .
          paths:
            - .
      - save_cache:
          paths:
            - ~/.m2
            # cached only for testing - don't cache secret stuff
            - ~/.gnupg/pubring.kbx
            - ~/.ssh/known_hosts
            - ~/.gitconfig
            - releasePropsCreated
          key: maven-release-orb-{{ checksum ".circleci/config.yml" }}

jobs:
  run-maven-release:
    <<: *JOB_DEPLOY_DEFAULTS
    steps:
      - maven-release:
          mvn-read-version-command: << parameters.mvn-read-version-command >>
          mvn-release-prepare-command: << parameters.mvn-release-prepare-command >>
          mvn-release-perform-command: << parameters.mvn-release-perform-command >>
